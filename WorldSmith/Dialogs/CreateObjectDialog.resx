<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAICAQAAAABADoAgAANgAAACAgAAAAAAgAqAgAAB4DAAAgIAAAAAAYAKgMAADGCwAAKAAAACAA
        AABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAQAAAAEAAAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICA
        AACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAZmZmZmZmZmZgAAAAAAAABmZm
        ZmZmZmZmAAAAAAAAAEZmZ3dmZnZmZgYAAAAAAABmZmd2JnZ3dmZgAAAAAAAEZmZndydnd3dmYAYAAAAA
        BmZmZ3cmIneHdmYEAAAAAEZmZniGdmZnh3ZmYAAAAABmZmeIdmcnZoh3ZmYAAAAAZmZ3hwB2ZyBod2Zm
        AAAAAmZmd2Aid3dyInd2ZmAAAAZmZmcDeIiIiHBydmZgAAAGZmBweHMiMieIJwZmIAAABmIACHMjIzMy
        J4IAAGAAAAJgAHcjMzMzMiJ4AgIgAAACZgdyIzMzI3MyJ3B2IAAAAmdoMiM3d3d3cyKGdiAAAAJndyM3
        d3d3ZnYid3YgAAACJ3cjd3Z4d3ZmZmd2IAAAAid3N3d3iHeIdmZndiAAAAIndzd36IaIiId2Z2YgAAAC
        J3d3eO5mcIjuZmdmIAAAACN3d3iIiGB3jmZnYiAAAAAid3d4eIhwh3Z2dmIAAAAAAid3d4gIiAiOdnYi
        AAAAAAImd3eIiIgIiHdmAAAAAAAAInd3iIiACIiGYgAAAAAAAAJmd4iIiIiIdmIAAAAAAAAAJmaIiHiI
        hmIgAAAAAAAAAAImZ3Zod2IgAAAAAAAAAAAAAiJmZiIiAAAAAAAAAAAAAAAAAiIAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAAIgAAAAIAAAAGAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAIAAAAAAAABAAAAAAAAAAAAAAAAQAAAAEAAAAA
        AABCQkIAWFhYAGNiYwBubW4AeXh4AIaGhgCRkZEAmpmZAKSjpACvrq8Aurm6AMXExQDx7/AA9vb2APn5
        +QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        /wAAAAAAAAEBAQEBAQECAwQEAgUFAwICAQEBAQAAAAAAAAAAAAAAAQEBAQICAwMDAwQBAwQFBAMCAQEB
        AAAAAAAAAAAAAAABAQECAwMFBQUBAgECBgUFBAIBAQEBAAAAAAAAAAAAAAEBAQEEBQYHBAECAwEEBQYF
        BAEBAQEAAAAAAAAAAAABAQEBAgUGBwcHAQMCAgYHCAYEAgEBAQEBAAAAAAAAAQEBAQICBQcICAcBAQEB
        BAgJBwUDAgEBAQEAAAAAAAABAQEBAwQGCAkJAgMBAQECCAkHBgMCAQEBAAAAAAAAAAEBAQIDBQcJCgUC
        AgIBBAIDCgkHBAMCAgEAAAAAAAAAAQEBAwUHCAoFAAEHAQEIAQEDCQgGBAMCAQEAAAAAAAABAQIDBQcF
        AQEBAQQGBgUCAQEBAwcFAwIBAQEAAAAAAQECAgQFAQIBAQgMCwkKCwwKAgEDAQUEAwEBAQAAAAABAQID
        AwECAQcLBQEBAQEBAQQJCQECAQIDAQEBAAAAAAEBAQEAAAAJCQEBAQEBAQEBAQEFCgEAAAEBAQEAAAAA
        AQEBAQABBwcBAQIBAQEBAwMBAQEDCgEBAAEBAQAAAAABAQIEAAMIAQEBAQEBAgECAwEBAQEFBgAEAQEB
        AAAAAAEBAgMCCgMBAQICAgMEBAUEAgUCAQEJAgUBAQEAAAAAAQECBAYIAQECBAQEBAYEBgUDBAICAQUG
        BAIBAQAAAAABAQEEBwUBAgQGBgUHCgQJCAUEAwICAgcEAgEBAAAAAAEBAQQGAwICBQgHCAoLBwYKCggF
        BAICBwQBAQEAAAAAAAEBAwYDAgQGCAkKDAIMDAkLCgcGAwIHAwEBAAAAAAAAAQECBgQDBQcKCQkGAQgN
        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
        AAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>